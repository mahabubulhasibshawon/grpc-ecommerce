// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/ports.go

// Package mock_ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mahabubulhasibshawon/grpc-ecommerce.git/internal/domain"
)

// MockAuthPort is a mock of AuthPort interface.
type MockAuthPort struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPortMockRecorder
}

// MockAuthPortMockRecorder is the mock recorder for MockAuthPort.
type MockAuthPortMockRecorder struct {
	mock *MockAuthPort
}

// NewMockAuthPort creates a new mock instance.
func NewMockAuthPort(ctrl *gomock.Controller) *MockAuthPort {
	mock := &MockAuthPort{ctrl: ctrl}
	mock.recorder = &MockAuthPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPort) EXPECT() *MockAuthPortMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthPort) Login(ctx context.Context, username, password string) (string, *domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*domain.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockAuthPortMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthPort)(nil).Login), ctx, username, password)
}

// Logout mocks base method.
func (m *MockAuthPort) Logout(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthPortMockRecorder) Logout(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthPort)(nil).Logout), ctx, userID)
}

// Signup mocks base method.
func (m *MockAuthPort) Signup(ctx context.Context, username, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, username, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockAuthPortMockRecorder) Signup(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuthPort)(nil).Signup), ctx, username, password)
}

// MockOrderRepositoryPort is a mock of OrderRepositoryPort interface.
type MockOrderRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryPortMockRecorder
}

// MockOrderRepositoryPortMockRecorder is the mock recorder for MockOrderRepositoryPort.
type MockOrderRepositoryPortMockRecorder struct {
	mock *MockOrderRepositoryPort
}

// NewMockOrderRepositoryPort creates a new mock instance.
func NewMockOrderRepositoryPort(ctrl *gomock.Controller) *MockOrderRepositoryPort {
	mock := &MockOrderRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepositoryPort) EXPECT() *MockOrderRepositoryPortMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockOrderRepositoryPort) CancelOrder(ctx context.Context, consignmentID string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, consignmentID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderRepositoryPortMockRecorder) CancelOrder(ctx, consignmentID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderRepositoryPort)(nil).CancelOrder), ctx, consignmentID, userID)
}

// CreateOrder mocks base method.
func (m *MockOrderRepositoryPort) CreateOrder(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryPortMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepositoryPort)(nil).CreateOrder), ctx, order)
}

// CreateUser mocks base method.
func (m *MockOrderRepositoryPort) CreateUser(ctx context.Context, username, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockOrderRepositoryPortMockRecorder) CreateUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockOrderRepositoryPort)(nil).CreateUser), ctx, username, password)
}

// FindUserByUsername mocks base method.
func (m *MockOrderRepositoryPort) FindUserByUsername(ctx context.Context, username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", ctx, username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockOrderRepositoryPortMockRecorder) FindUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockOrderRepositoryPort)(nil).FindUserByUsername), ctx, username)
}

// ListOrders mocks base method.
func (m *MockOrderRepositoryPort) ListOrders(ctx context.Context, userID, limit, page int64) ([]*domain.Order, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, userID, limit, page)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockOrderRepositoryPortMockRecorder) ListOrders(ctx, userID, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderRepositoryPort)(nil).ListOrders), ctx, userID, limit, page)
}
